searchState.loadedDescShard("exec", 0, "exec.rs\nType of error with which task can be completed.\nType of error with which task can be completed.\nScheduler that schedules task on current thread.\nA stop token, that never stops.\nType of operation state obtained on connect.\nRepresents executable task.\nThis models the part of task which contains callback when …\nType of sender obtained from schedule opertaion.\nRepresents handle to execution context.\nThis models the part of task which represents the work …\nType of stop token.\nType of value with which task can be completed.\nType of value with which task can be completed.\nConnects sender with receiver to produce executable task …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a sender, that completes on current context with …\nReturns a sender, that completes on current context with …\nReturns a sender, that completes on current context with …\nCreates a new callback that would be called when stop …\nReturns a sender that represent task scheduled on …\nCallback for task, when it gets cancelled.\nCallback for task, when it completes with error.\nCallback for task, when it completes with value.\nStart the task represented by operation state.\nRequests stop for source.\nReturns true if stop token has stop requested.\nReturns true if stop has been requested already.\nReturns a stop token for checking stop requested.\nPerform a blocking wait on <code>sender</code> and return result of its …\nReturns a sender which completes with value …\nReturns a sender which completes with value …\nunregisters the callback.")